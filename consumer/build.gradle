buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://packages.confluent.io/maven/"
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath group:'com.github.imflog', name:'kafka-schema-registry-gradle-plugin',version: '1.10.0'
        classpath group: 'org.apache.avro', name: 'avro-tools', version: '1.11.1'
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.simple'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    all {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'com.google.gson'
        exclude group: 'com.google.code.gson'
    }
}


repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://packages.confluent.io/maven/"
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

ext {
    set('springCloudVersion', "2021.0.5")
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.cloud:spring-cloud-stream-binder-kafka')
    implementation group: 'org.glassfish', name: 'javax.el', version: '3.0.0'
    implementation("com.github.imflog:kafka-schema-registry-gradle-plugin:1.10.0")
    implementation('org.apache.avro:avro-tools:1.11.2') {
        exclude group: 'com.google.gson'
        exclude group: 'com.google', module: 'gson'
        exclude group: 'com.google.code', module: 'gson'
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '5.3.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

apply plugin: 'com.github.imflog.kafka-schema-registry-gradle-plugin'


tasks.named('test') {
    useJUnitPlatform()
}


import org.apache.avro.tool.SpecificCompilerTool

def avroSchemasDir = "src/main/avro"
def avroCodeGenerationDir = "build/generated-main-avro-java/"

// Add the generated Avro Java code to the Gradle source files.
sourceSets.main.java.srcDirs += [avroCodeGenerationDir]

tasks.register('avroCodeGeneration') {
    // Define the task inputs and outputs for the Gradle up-to-date checks.
    inputs.dir(avroSchemasDir)
    outputs.dir(avroCodeGenerationDir)
    // The Avro code generation logs to the standard streams. Redirect the standard streams to the Gradle log.
    logging.captureStandardOutput(LogLevel.INFO)
    logging.captureStandardError(LogLevel.ERROR)
    doLast {
        // Run the Avro code generation.
        new SpecificCompilerTool().run(System.in, System.out, System.err, List.of(
                "-encoding", "UTF-8",
                "-string",
                "-bigDecimal",
                "-fieldVisibility", "private",
                "-noSetters",
                "schema", "$projectDir/$avroSchemasDir".toString(), "$projectDir/$avroCodeGenerationDir".toString()
        ))
    }
}
schemaRegistry {
    url = "http://localhost:8081/"
    download {
        // extension of the output file depends on the the schema type
        subject('order-topic-value', 'consumer/src/main/avro')
        // You can use a regex to download multiple schemas at once
        subjectPattern('avro.*', 'consumer/src/main/avro')
    }
}

tasks.withType(JavaCompile).configureEach {
    dependsOn('configSubjectsTask')
    dependsOn('downloadSchemasTask')
    dependsOn('avroCodeGeneration')
    // Make Java compilation tasks depend on the Avro code generation task.

}
